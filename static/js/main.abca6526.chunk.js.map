{"version":3,"sources":["init-fcm.js","NotificationDialog.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["messaging","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","SimpleDialog","React","useState","open","setOpen","handleClose","useEffect","navigator","serviceWorker","addEventListener","message","console","log","data","Button","variant","color","onClick","Dialog","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","App","getToken","then","token","catch","err","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","scope","useServiceWorker","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.abca6526.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/messaging\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n    apiKey: \"AIzaSyCbnMN2Z_jF2hu2WHZy_csPzaVb09M-CJY\",\r\n    authDomain: \"cra-pwa-notification.firebaseapp.com\",\r\n    projectId: \"cra-pwa-notification\",\r\n    storageBucket: \"cra-pwa-notification.appspot.com\",\r\n    messagingSenderId: \"105560085884\",\r\n    appId: \"1:105560085884:web:2b1a95db109665a43e80f9\",\r\n    measurementId: \"G-KDENP93Z1J\"\r\n}\r\n\r\nconst initializedFirebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst messaging = initializedFirebaseApp.messaging()\r\nexport {messaging}\r\nexport {firebase}\r\n","import React, {useEffect} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nexport default function SimpleDialog() {\r\n\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        navigator.serviceWorker.addEventListener('message', (message) => console.log(message.data))\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Slide in alert dialog\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                keepMounted\r\n                onClose={handleClose}\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"TITLE\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        CONTENT\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button variant={'contained'}onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n\r\n                    <Button variant={'contained'}onClick={handleClose} color=\"primary\">\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst a = {\r\n    \"firebase-messaging-msg-type\": \"push-msg-received\",\r\n    \"firebase-messaging-msg-data\": {\r\n        \"data\": {\r\n            \"gcm.n.e\": \"1\",\r\n            \"google.c.a.ts\": \"1607593474\",\r\n            \"google.c.a.udt\": \"0\",\r\n            \"google.c.a.e\": \"1\",\r\n            \"google.c.a.c_id\": \"6197527633312980929\"\r\n        },\r\n        \"from\": \"105560085884\",\r\n        \"priority\": \"high\",\r\n        \"notification\": {\r\n            \"title\": \"test\",\r\n            \"body\": \"test\",\r\n            \"tag\": \"campaign_collapse_key_6197527633312980929\"\r\n        },\r\n        \"collapse_key\": \"campaign_collapse_key_6197527633312980929\"\r\n    }\r\n}\r\n","import React, {useEffect} from 'react'\nimport './App.css'\nimport {messaging} from './init-fcm.js'\nimport SimpleDialog from './NotificationDialog'\n\nfunction App() {\n\n    useEffect(() => {\n        messaging.getToken()\n            .then( () => {\n                const token = messaging.getToken()\n                console.log('Token', token)\n            })\n            .catch((err: any) => console.log('Unable to get permission to notify.', err))\n\n        navigator.serviceWorker.addEventListener('message', (message) => console.log(message))\n\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"w3-display-container w3-animate-opacity w3-text-white\">\n                    <div className=\"w3-display-middle\">\n                        <h5 className=\"w3-jumbo w3-animate-top\">Notifica in arrivo</h5>\n                    </div>\n                </div>\n            </header>\n\n            <SimpleDialog/>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {messaging} from './init-fcm'\n\nnavigator.serviceWorker.addEventListener(\"message\", (message) => console.log(message));\n\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker\n        .register('./../public/firebase-messaging-sw')\n        .then(function (registration: ServiceWorkerRegistration) {\n            console.log('Registration successful, scope is:', registration.scope)\n            messaging.useServiceWorker(registration);\n        })\n        .catch(function (err) {\n            console.log('Service worker registration failed, error:', err)\n        })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}